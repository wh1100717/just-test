// Generated by CoffeeScript 1.7.1
define('lib/collection', function(require, exports, module) {
  'use strict';
  var Collection, Operation, Utils;
  Utils = require('lib/utils');
  Operation = require('lib/operation');
  Collection = (function() {

    /*
     *  in LocalDB, only use LocalDB to get a collection.
     *  db = new LocalDB('foo')
     *  var collection = db.collection('bar')
     */
    function Collection(collectionName, db) {
      if (collectionName === void 0) {
        throw new Error("collectionName should be specified.");
      }
      this.name = "" + db.name + "_" + collectionName;
      this.ls = db.ls;
      this.deserialize();
    }


    /*
     *  get data and tranfer into object from localStorage/sessionStorage
     */

    Collection.prototype.deserialize = function() {
      return this.data = Utils.parse(this.ls.getItem(this.name));
    };


    /*
     *  save data into localStorage/sessionStorage
     *  when catching error in setItem(), delete the oldest data and try again.
     */

    Collection.prototype.serialize = function() {
      var e, flag;
      try {
        this.ls.setItem(this.name, Utils.stringify(this.data));
      } catch (_error) {
        e = _error;
        flag = true;
        while (flag) {
          try {
            this.data.splice(0, 1);
            this.ls.setItem(this.name, Utils.stringify(this.data));
            flag = false;
          } catch (_error) {}
        }
      }
    };


    /*
     *  delete this collection
     */

    Collection.prototype.drop = function() {
      this.ls.removeItem(this.name);
      return true;
    };


    /*
     *  insert data into collection
     */

    Collection.prototype.insert = function(rowData, options) {
      if (options == null) {
        options = {};
      }
      this.deserialize();
      this.data = Operation.insert(this.data, rowData, options);
      return this.serialize();
    };


    /*
     *  update collection
     */

    Collection.prototype.update = function(actions, options) {
      if (options == null) {
        options = {};
      }
      this.deserialize();
      this.data = Operation.update(this.data, actions, options);
      return this.serialize();
    };


    /*
     *  remove data from collection
     */

    Collection.prototype.remove = function(options) {
      if (options == null) {
        options = {};
      }
      this.deserialize();
      this.data = Operation.remove(this.data, options);
      return this.serialize();
    };


    /*
     * find data from collection
     */

    Collection.prototype.find = function(options) {
      if (options == null) {
        options = {};
      }
      this.deserialize();
      return Operation.find(this.data, options);
    };


    /*
     *  find data and only return one data from collection
     */

    Collection.prototype.findOne = function(options) {
      var data;
      if (options == null) {
        options = {};
      }
      options.limit = 1;
      data = Operation.find(this.data, options)[0];
      if (data != null) {
        return data;
      } else {
        return {};
      }
    };

    return Collection;

  })();
  return module.exports = Collection;
});
