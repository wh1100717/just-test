// Generated by CoffeeScript 1.7.1
define('lib/projection', function(require, exports, module) {
  'use strict';
  var Projection, Utils, generateItem;
  Utils = require('lib/utils');
  Projection = {};
  Projection.generate = function(data, projection) {
    var d, item, result, _i, _len;
    if (JSON.stringify(projection) === "{}") {
      return data;
    }
    result = [];
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      d = data[_i];
      item = generateItem(d, projection);
      if (!Utils.isEqual(item, {})) {
        result.push(item);
      }
    }
    return result;
  };
  generateItem = function(item, projection) {
    var flag, gItem, i, idFlag, key, r, result, v_key, v_value, value, _i, _len;
    result = {};
    idFlag = true;
    for (key in projection) {
      value = projection[key];
      if (key === "_id" && value === -1) {
        idFlag = false;
        continue;
      }
      if (key.indexOf(".$") !== -1) {
        key = key.split(".")[0];
        if (!Utils.isArray(item[key]) || item[key].length === 0) {
          continue;
        }
        result[key] = [item[key][0]];
      } else if (key.indexOf("$elemMatch") === 0) {
        if (!Utils.isArray(item) || item.length === 0) {
          return [];
        }
        r = [];
        for (_i = 0, _len = item.length; _i < _len; _i++) {
          i = item[_i];
          flag = true;
          for (v_key in value) {
            v_value = value[v_key];
            if (Utils.isObject(v_value)) {

            } else {
              if (i[v_key] !== v_value) {
                flag = false;
              }
            }
          }
          if (flag) {
            r.push(i);
            break;
          }
        }
        if (Utils.isEqual(r, [])) {
          return [];
        }
        return r;
      } else if (Utils.isObject(value)) {
        gItem = generateItem(item[key], value);
        if (!Utils.isEqual(gItem, [])) {
          result[key] = gItem;
        }
      } else {
        if (value === 1) {
          result[key] = item[key];
        }
      }
    }
    if (idFlag && !Utils.isEqual(result, {})) {
      result._id = item._id;
    }
    return result;
  };
  return module.exports = Projection;
});
